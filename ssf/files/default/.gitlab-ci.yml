# -*- coding: utf-8 -*-
# vim: ft=yaml
---
{%- from tplroot ~ "/libcimatrix.jinja" import format_ci_matrix with context %}

{#- Prepare variable used for `saltcheck` #}
{%- set use_saltcheck = False %}
{%- if semrel_formula in ['cron'] %}
{%-   set use_saltcheck = True %}
{%- endif %}
{#- Prepare variable used for formulas (not) running tests in GitLab CI #}
{%- set use_stage_test = False %}
{%- if semrel_formula != 'ssf' and (platforms and not use_cirrus_ci and not use_github_actions) %}
{%-   set use_stage_test = True %}
{%- endif %}
###############################################################################
# Define all YAML node anchors
###############################################################################
.node_anchors:
  # `only` (also used for `except` where applicable)
  only_branch_master_parent_repo: &only_branch_master_parent_repo
    - 'master@{{ gitlab.owner }}/{{ gitlab.repo or formula }}'
  # `stage`
  stage_lint: &stage_lint 'lint'
  stage_release: &stage_release 'release'
  {%- if use_stage_test %}
  stage_test: &stage_test 'test'
  {%- endif  %}
  # `image`
  image_commitlint: &image_commitlint 'myii/ssf-commitlint:11'
  {%- if use_stage_test %}
  image_dindruby: &image_dindruby 'myii/ssf-dind-ruby:2.7.1-r3'
  {%-   if semrel_formula == 'template' %}
  image_dindrubybionic: &image_dindrubybionic 'myii/ssf-dind-ruby-bionic:2.7.5-1bbox1'
  {%-   endif  %}
  {%- endif  %}
  image_precommit: &image_precommit
    name: 'myii/ssf-pre-commit:2.9.2'
    entrypoint: ['/bin/bash', '-c']
  image_rubocop: &image_rubocop 'pipelinecomponents/rubocop:latest'
  {#- Temporary hack required until all formulas are converted over to use with Antora #}
  {%-   if semrel_formula in ['apache'] %}
  # yamllint disable-line rule:line-length
  image_semantic-release: &image_semanticrelease 'myii/ssf-semantic-release-pandoc:15.14'
  {%-   else %}
  image_semantic-release: &image_semanticrelease 'myii/ssf-semantic-release:15.14'
  {%-   endif  %}
  {%- if use_stage_test %}
  # `services`
  services_docker_dind: &services_docker_dind
    - 'docker:dind'
  # `variables`
  # https://forum.gitlab.com/t/gitlab-com-ci-caching-rubygems/5627/3
  # https://bundler.io/v1.16/bundle_config.html
  variables_bundler: &variables_bundler
    BUNDLE_CACHE_PATH: '${CI_PROJECT_DIR}/.cache/bundler'
    BUNDLE_WITHOUT: 'production'
  # `cache`
  cache_bundler: &cache_bundler
    key: '${CI_JOB_STAGE}'
    paths:
      - '${BUNDLE_CACHE_PATH}'
  {%- endif  %}

###############################################################################
# Define stages and global variables
###############################################################################
stages:
  - *stage_lint
  {%- if use_stage_test %}
  - *stage_test
  {%- endif  %}
  - *stage_release
{%- if use_stage_test %}
variables:
  DOCKER_DRIVER: 'overlay2'
{%- endif  %}

###############################################################################
# `lint` stage: `commitlint`, `pre-commit` & `rubocop` (latest, failure allowed)
###############################################################################
commitlint:
  stage: *stage_lint
  image: *image_commitlint
  script:
    # Add `upstream` remote to get access to `upstream/master`
    - 'git remote add upstream
       https://gitlab.com/{{ gitlab.owner }}/{{ gitlab.repo or formula }}.git'
    - 'git fetch --all'
    # Set default commit hashes for `--from` and `--to`
    - 'export COMMITLINT_FROM="$(git merge-base upstream/master HEAD)"'
    - 'export COMMITLINT_TO="${CI_COMMIT_SHA}"'
    # `coqbot` adds a merge commit to test PRs on top of the latest commit in
    # the repo; amend this merge commit message to avoid failure
    - |
      if [ "${GITLAB_USER_LOGIN}" = "coqbot" ] \
      && [ "${CI_COMMIT_BRANCH}" != "master" ]; then
        git commit --amend -m \
          'chore: reword coqbot merge commit message for commitlint'
        export COMMITLINT_TO=HEAD
      fi
    # Run `commitlint`
    - 'commitlint --from "${COMMITLINT_FROM}"
                  --to   "${COMMITLINT_TO}"
                  --verbose'

pre-commit:
  stage: *stage_lint
  image: *image_precommit
  # https://pre-commit.com/#gitlab-ci-example
  variables:
    PRE_COMMIT_HOME: '${CI_PROJECT_DIR}/.cache/pre-commit'
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - '${PRE_COMMIT_HOME}'
  script:
    - 'pre-commit run --all-files --color always --verbose'

# Use a separate job for `rubocop` other than the one potentially run by `pre-commit`
# - The `pre-commit` check will only be available for formulas that pass the default
#   `rubocop` check -- and must continue to do so
# - This job is allowed to fail, so can be used for all formulas
# - Furthermore, this job uses all of the latest `rubocop` features & cops,
#   which will help when upgrading the `rubocop` linter used in `pre-commit`
rubocop:
  allow_failure: true
  stage: *stage_lint
  image: *image_rubocop
  script:
    - 'rubocop -d -P -S --enable-pending-cops'

{%- if platforms and not use_cirrus_ci and not use_github_actions %}

###############################################################################
# Define `test` template
###############################################################################
.test_instance: &test_instance
  stage: *stage_test
  image: *image_dindruby
  services: *services_docker_dind
  variables: *variables_bundler
  cache: *cache_bundler
  before_script:
    {%- if semrel_formula == 'keepalived' %}
    - 'apk --no-cache add ipvsadm'
    - 'modprobe ip_vs || true'
    {%- endif %}
    # TODO: This should work from the env vars above automatically
    - 'bundle config set path "${BUNDLE_CACHE_PATH}"'
    - 'bundle config set without "${BUNDLE_WITHOUT}"'
    - 'bundle install'
  script:
    # Alternative value to consider: `${CI_JOB_NAME}`
    - '{{ script_kitchen.bin }} {{ script_kitchen.cmd }} "${DOCKER_ENV_CI_JOB_NAME}"'

###############################################################################
# Define `test` template (`allow_failure: true`)
###############################################################################
.test_instance_failure_permitted:
  <<: *test_instance
  allow_failure: true

{%-   if semrel_formula == 'template' %}
# <REMOVEME

###############################################################################
# Define `test_conversion` template
###############################################################################
.test_conversion:
  stage: *stage_test
  image: *image_dindrubybionic
  services: *services_docker_dind
  variables: *variables_bundler
  cache: *cache_bundler
  before_script:
    - 'export CONVERTED=test-the-use_this_template-button'
    - 'git clone . tmp/"${CONVERTED}"-formula'
    - 'cd tmp/"${CONVERTED}"-formula'
    # Install `pre-commit` hooks
    - 'bin/install-hooks'
    # Run the conversion script with debug output
    - 'DEBUG=true bin/convert-formula.sh "${CONVERTED}"'
    - '[ $(git rev-list HEAD --count) -eq 2 ]'
    # Quick visual check that correct files have been updated
    - 'git show --pretty="" --name-status'
    # TODO: This should work from the env vars above automatically
    - 'bundle config set path "${BUNDLE_CACHE_PATH}"'
    - 'bundle config set without "${BUNDLE_WITHOUT}"'
    - 'bundle update --bundler --conservative'
    - 'bundle binstubs bundler --force'
    - 'PATH=./bin:"$PATH" bundle install'
  script:
    - '{{ script_kitchen.bin }} {{ script_kitchen.cmd }} default-debian-11-master-py3'
# REMOVEME>
{%-   endif %}

###############################################################################
# `test` stage: each instance below uses the `test` template above
###############################################################################
## Define the rest of the matrix based on Kitchen testing
# Make sure the instances listed below match up with
# the `platforms` defined in `kitchen.yml`
{%-   if semrel_formula == 'template' %}
# <REMOVEME
# NOTE: Please try to select up to six instances that add some meaningful
#       testing of the formula's behaviour. If possible, try to refrain from
#       the classical "chosing all the instances because I want to test on
#       another/all distro/s" trap: it will just add time to the testing (see
#       the discussion on #121).  As an example, the set chosen below covers
#       the most used distros families, systemd and non-systemd and the latest
#       three supported Saltstack versions with python2 and 3.
#       As for `kitchen.yml`, that should still contain all of the platforms,
#       to allow for comprehensive local testing
#       Ref: https://github.com/saltstack-formulas/template-formula/issues/118
#       Ref: https://github.com/saltstack-formulas/template-formula/issues/121
test-formula-conversion: {extends: '.test_conversion'}
# REMOVEME>
{%-   endif %}
{{- format_ci_matrix(platforms, inspec_suites_kitchen, inspec_suites_matrix, platforms_matrix, platforms_matrix_allow_failure, platforms_matrix_commented_includes, semrel_formula, width=0, use_gitlab_format=True) }}
{%- endif %}

###############################################################################
# `release` stage: `semantic-release`
###############################################################################
semantic-release:
  only: *only_branch_master_parent_repo
  stage: *stage_release
  image: *image_semanticrelease
  variables:
    MAINTAINER_TOKEN: '${GH_TOKEN}'
  script:
    # Update `AUTHORS.md`
    - '${HOME}/go/bin/maintainer contributor'
    # Run `semantic-release`
    - 'semantic-release'
