# -*- coding: utf-8 -*-
# vim: ft=yaml
---
{#- {%- from tplroot ~ "/libcontext.jinja" import format_context, format_kwargs, format_list with context %} #}
{%- macro format_matcher(matcher_parent, width=10) %}
{%-   filter indent(width) %}
{%-     for mp in matcher_parent %}
{%-       for matcher, matcher_specs in mp.items() %}
'{{ matcher }}':
{%-         for matcher_child in matcher_specs %}
{%-           if matcher_child == '.' %}
{%-             set matcher_child = semrel_formula %}
{%-           elif matcher_child.startswith('.') %}
{%-             set matcher_child = semrel_formula ~ matcher_child %}
{%-           endif %}
{#-           To allow comments interspersed the list, use `list_format` accordingly #}
{%-           set list_format = '- ' %}
{%-           if matcher_child.startswith('#') %}
{%-             set list_format = '' %}
{%-           endif %}
  {{ list_format }}{{ matcher_child }}
{%-         endfor %}
{%-       endfor %}
{%-     endfor %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_includes_excludes(suite, clude_type) %}
{%-   filter indent(4) %}
{%-     set cludes = suite[clude_type] %}
{%-     if cludes %}
{{ clude_type }}:
{#-       Centralise duplication from here and `libcimatrix.jinja` #}
{%-       set all_platforms = saltimages + vagrantboxes + proxyplatformswindows %}
{%-       for platform in all_platforms %}
{%-         set os       = platform[0] | d('') %}
{%-         set os_ver   = platform[1] | d('') %}
{%-         set salt_ver = platform[2] | d('') %}
{%-         set py_ver   = platform[3] | d('') %}

{#-         Check if the platform matches any of the `platforms` listed #}
{%-         set ns_check_platform = namespace(match=False) %}
{%-         for check in cludes %}
{%-           set ch_os       = check[0] if check[0] else platform[0] %}
{%-           set ch_os_ver   = check[1] if check[1] else platform[1] %}
{%-           set ch_salt_ver = check[2] if check[2] else platform[2] %}
{%-           set ch_py_ver   = check[3] if check[3] else platform[3] %}
{%-           if platform == [ch_os, ch_os_ver, ch_salt_ver, ch_py_ver] %}
{%-             set ns_check_platform.match = True %}
{%-             break %}
{%-           endif %}
{%-         endfor %}
{#-         If a match hasn't been found, go to the next entry under `saltimages` #}
{%-         if not ns_check_platform.match %}
{%-           continue %}
{%-         endif %}

{#-         Concatenate the `INSTANCE` or set to `NONE` otherwise #}
{%-         if not platform %}
{%-           set instance = 'NONE' %}
{%-         else %}
{%-           set instance = '{0}-{1}-{2}-py{3}'.format(
                os | replace('/', '-'),
                os_ver | replace('.', ''),
                salt_ver | replace('.', '-'),
                py_ver,
              ) %}
{%-         endif %}
  - {{ instance }}
{%-       endfor %}
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_driver_image(os, os_ver, salt_ver, py_ver, pre_salted) %}
{%-   filter indent(6) %}
{#-     Use bootstrapped images where not already pre-salted #}
{%-     if not pre_salted %}
image: {{ os }}:{{ os_ver }}
{%-     else %}
image: {{ 'saltimages' if [os, os_ver, salt_ver, py_ver] in saltimages else 'netmanagers' }}/salt-{{ salt_ver }}-py{{ py_ver }}:{{ os | replace('/', '-') | replace('tmbl', 'tumbleweed') }}-{{ os_ver }}
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_driver_prov_cmds(os, os_ver, salt_ver, py_ver, pre_salted) %}
{#-   TODO: Should really do this whole `if` block from `defaults.yaml` or `formulas.yaml`, just speeding things up right now #}
{#-         Need to look at if this can be resolved from within the formulas themselves, though                               #}
{%-   filter indent(6) %}
{%-     set prov_cmds = [] %}
{#-     Specific to bootstrapped images #}
{%-     if not pre_salted %}
{#-       Use the appropriate bootstrap options for bootstrapped images #}
{%-       set bootstrap_options = 'XdPfq' %}
{#-       Use the appropriate bootstrap method #}
{%-       set bootstrap_method = 'stable' %}
{%-       do prov_cmds.append('- curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com') %}
{%-       do prov_cmds.append('- sh bootstrap-salt.sh -{0} -x python{1} {2} {3}'.format(
              bootstrap_options, py_ver, bootstrap_method, salt_ver
          )) %}
{#-       Add formula-specific provision commands #}
{%-       if semrel_formula == 'deepsea' %}
{%-         if os in ['centos', 'fedora'] %}
{%-           do prov_cmds.append('- yum install make -y') %}
{%-         endif %}
{%-       elif semrel_formula == 'golang' %}
{%-         if os in ['debian', 'ubuntu'] %}
{%-           do prov_cmds.append('# https://github.com/saltstack/salt/issues/39314') %}
{%-           do prov_cmds.append('- apt-get remove python-boto3 -y') %}
{%-         elif os.startswith('opensuse') %}
{%-           do prov_cmds.append('# https://github.com/saltstack/salt/issues/39314') %}
{%-           do prov_cmds.append('- zypper rm python-boto3 -y') %}
{%-         endif %}
{%-       endif %}
{%-     endif %}
{#-     General for all Salt versions #}
{%-     if semrel_formula == 'packages' %}
{%-       if [os, os_ver] in [['debian', 10], ['debian', 9]] %}
{%-         do prov_cmds.append('- apt-get update') %}
{%-         do prov_cmds.append('- apt-get install --reinstall -y udev') %}
{%-         do prov_cmds.append('- apt-get install -y snapd') %}
{%-       endif %}
{%-     elif semrel_formula == 'systemd' %}
{%-       if os in ['fedora'] %}
{%-         do prov_cmds.append('- dnf -y update') %}
{%-         do prov_cmds.append('- dnf -y reinstall udev') %}
{%-       elif os in ['arch-base'] %}
{%-         do prov_cmds.append('- pacman --noconfirm -Syu systemd') %}
{%-       endif %}
{%-     elif semrel_formula == 'docker' %}
{%-       if os in ['debian', 'ubuntu'] %}
{%-         do prov_cmds.append('- apt-get update') %}
{%-         do prov_cmds.append('- apt-get -qq -y install conntrack') %}
{%-       elif os in ['centos', 'amazonlinux', 'oraclelinux'] %}
{%-         do prov_cmds.append('- yum install conntrack-tools -y') %}
{%-       elif os in ['fedora'] %}
{%-         do prov_cmds.append('- dnf install conntrack-tools -y') %}
{%-       elif os.startswith('opensuse') %}
{%-         do prov_cmds.append('- zypper --non-interactive install conntrack-tools') %}
{%-       elif os in ['arch-base'] %}
{%-         do prov_cmds.append('- (test -x /usr/bin/pacman-mirrors && /usr/bin/pacman-mirrors -g) || true') %}
{%-         do prov_cmds.append('- pacman -S --noconfirm conntrack-tools tar') %}
{%-       elif os in ['gentoo/stage3'] %}
{%-         do prov_cmds.append('emerge --noreplace --quiet --with-bdeps-auto=n net-firewall/conntrack-tools') %}
{%-       endif %}
{%-     elif semrel_formula == 'locale' %}
{%-       if os in ['arch-base'] %}
{%-         do prov_cmds.append('- sed -i -e "/locale/s/^/#/" /etc/pacman.conf') %}
{%-         do prov_cmds.append('- pacman --noconfirm -Syu glibc') %}
{%-       endif %}
{%-     endif %}
{#-     Prepare the commands if available#}
{%-     if prov_cmds %}
provision_command:
{%-       for prov_cmd in prov_cmds %}
  {{ prov_cmd }}
{%-       endfor %}
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_driver_run_cmds(os, os_ver) %}
{%-   filter indent(6) %}
{%-     if os in ['opensuse/leap', 'opensuse/tmbl', 'arch-base'] %}
run_command: /usr/lib/systemd/systemd
{%-     elif [os, os_ver] in [['amazonlinux', 1], ['centos', 6], ['gentoo/stage3', 'latest']] %}
run_command: /sbin/init
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}
# For help on this file's format, see https://kitchen.ci/
driver:
  name: docker
  use_sudo: false
  privileged: true
  run_command: /lib/systemd/systemd
  {%- set run_options = kitchen.driver.run_options %}
  {%- if run_options %}
  {%-   if semrel_formula == 'proftpd' %}
  # Fix a bug with CentOS 6 that prevents proftpd
  # from starting: cannot resolve localhost.localdomain
  {%-   endif %}
  run_options:
    {%- for k, v in run_options.items() %}
    {{ k }}:
      {%- if v is not list %}
      {{ v | yaml(False) }}
      {%- else %}
      {%-   for v1 in v %}
      - {{ v1 | yaml_squote if v1 is string else v1 }}
      {%-   endfor %}
      {%- endif %}
    {%- endfor %}
  {%- endif %}

platforms:
{#- Centralise duplication from here and `libcimatrix.jinja` #}
{%- set ns_platforms = namespace(prev_comment='') %}

{#- Work through all `saltimages` for ordering purposes; #}
{#- Only matching elements will be used (covered by the subsequent `for` loop #}
{%- for platform in saltimages %}
{%-   set os       = platform[0] %}
{%-   set os_ver   = platform[1] %}
{%-   set salt_ver = platform[2] %}
{%-   set py_ver   = platform[3] %}

{#-   Check if the platform matches any of the `platforms` listed #}
{%-   set ns_check_platform = namespace(match=False) %}
{%-   for check in platforms %}
{%-     set ch_os       = check[0] if check[0] else platform[0] %}
{%-     set ch_os_ver   = check[1] if check[1] else platform[1] %}
{%-     set ch_salt_ver = check[2] if check[2] else platform[2] %}
{%-     set ch_py_ver   = check[3] if check[3] else platform[3] %}
{%-     if platform == [ch_os, ch_os_ver, ch_salt_ver, ch_py_ver] %}
{%-       set ns_check_platform.match = True %}
{%-       break %}
{%-     endif %}
{%-   endfor %}
{#-   If a match hasn't been found, go to the next entry under `saltimages` #}
{%-   if not ns_check_platform.match %}
{%-     continue %}
{%-   endif %}

{#-   Was used for `[['amazonlinux', 1]]` but now leaving blank in case it's needed in the future #}
{%-   set pre_salted = [os, os_ver] not in [[]] %}
{#-   Display comment for each section (based on Salt version) #}
{%-   set linebreak = '\n' %}
{%-   set comment = '`{0}`'.format(salt_ver) %}
{%-   if loop.index0 == 0 %}
{%-     set linebreak = '' %}
{%-   endif %}
{%-   if ns_platforms.prev_comment != comment %}
{{ linebreak }}  ## SALT {{ comment }}
{%-     set ns_platforms.prev_comment = comment %}
{%-   endif %}
  - name: {{ os | replace('/', '-') }}-{{ os_ver | replace('.', '') }}-{{ salt_ver | replace('.', '-') }}-py{{ py_ver }}
    driver:
      {{- format_driver_image(os, os_ver, salt_ver, py_ver, pre_salted) }}
      {{- format_driver_prov_cmds(os, os_ver, salt_ver, py_ver, pre_salted) }}
      {{- format_driver_run_cmds(os, os_ver) }}
    {%- if os.startswith('opensuse') %}
    # Workaround to avoid intermittent failures on `opensuse-{{ 'tumbleweed' if os_ver == 'latest' else 'leap-' ~ os_ver }}`:
    # => SCP did not finish successfully (255):  (Net::SCP::Error)
    transport:
      max_ssh_sessions: 1
    {%- endif %}
{%- endfor %}

provisioner:
  name: salt_solo
  log_level: {{ 'info' if semrel_formula in ['devstack'] else 'debug' }}
  salt_install: none
  require_chef: false
  formula: {{ semrel_formula }}
  salt_copy_filter:
    - .kitchen
    - .git

verifier:
  # https://www.inspec.io/
  name: inspec
  sudo: true
  # cli, documentation, html, progress, json, json-min, json-rspec, junit
  reporter:
    - cli

suites:
  {%- for index in range(0, inspec_suites_kitchen | length) %}
  {%-   set suite = inspec_suites_kitchen[index] %}
  {#-   Only include the suite if the `suite.name` is set #}
  {#-   Furthermore, do not include if `includes: *includes_NONE` has been set #}
  {%-   if suite.name and not (suite.includes and not suite.includes[0]) %}
  {#-     Add comment above suite where required (avoid, keep limited to `arvados` if possible #}
  {%-     if semrel_formula == 'arvados' %}
  {%-       set suite_name_comment = suite.name %}
  {%-       if suite.name == 'api' %}
  {%-         set suite_name_comment = suite_name_comment ~ ',websocket,keepproxy,keepweb,controller' %}
  {%-       elif suite.name == 'workbench' %}
  {%-         set suite_name_comment = suite_name_comment ~ ',workbench2' %}
  {%-       endif %}
  #### {{ suite_name_comment }}
  {%-     endif %}
  - name: {{ suite.name }}
    {{- format_includes_excludes(suite, 'excludes') }}
    {{- format_includes_excludes(suite, 'includes') }}
    {%-   set driver = suite.driver %}
    {%-   if driver %}
    driver:
      {%-   for k, v in driver.items() %}
      {{ k }}: {{ v }}
      {%-   endfor %}
    {%-   endif %}
    provisioner:
      {#- dependencies #}
      {#- Centralise duplication from here and `inspec.yml` #}
      {%- set dependencies = suite.provisioner.dependencies %}
      {%- if dependencies %}
      dependencies:
        {%- for dependency in dependencies %}
        - name: {{ dependency.name }}
        {%-   for k, v in dependency.items() %}
        {%-     if k != 'name' %}
          {{ k }}: {{ v }}
        {%-     endif %}
        {%-   endfor %}
        {%- endfor %}
      {%- endif %}
      state_top:
        base:
          {{- format_matcher(suite.provisioner.state_top) }}
      pillars:
        top.sls:
          base:
            {{- format_matcher(suite.provisioner.pillars, width=12) }}
      {#- pillars_from_files #}
      {%- set pillars_from_files = suite.provisioner.pillars_from_files %}
      {%- if pillars_from_files %}
      pillars_from_files:
        {%- for pff in pillars_from_files %}
        {#- To allow comments interspersed the list, check for string #}
        {%-   if pff is string %}
        {{ pff }}
        {%-   else %}
        {%-     for k, v in pff.items() %}
        {%-       if k.startswith('.') %}
        {%-         set k = semrel_formula ~ k %}
        {%-       endif %}
        {{ k }}: {{ v }}
        {%-     endfor %}
        {%-   endif %}
        {%- endfor %}
      {%- endif %}
    verifier:
      {%- set controls = suite.verifier.controls %}
      {%- if controls %}
      controls:
        {%- for control in controls %}
        {%-   if control.startswith('.') %}
        {%-     set control = semrel_formula ~ control %}
        {%-   endif %}
        - {{ control }}
        {%- endfor %}
      {%- endif %}
      inspec_tests:
        {%- set inspec_tests_path_prefix = suite.verifier.inspec_tests_path_prefix %}
        {%- for test_suite in suite.verifier.inspec_tests %}
        {%-   if test_suite == '.' %}
        {%-     set test_suite = suite.name %}
        {%-   endif %}
        - path: {{ inspec_tests_path_prefix }}/{{ test_suite }}
        {%- endfor %}
  {%-   endif %}
  {%- endfor %}
