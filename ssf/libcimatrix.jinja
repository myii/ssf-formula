# -*- coding: utf-8 -*-
# vim: ft=jinja

{%- macro format_ci_matrix(
              platforms,
              inspec_suites_kitchen,
              inspec_suites_matrix,
              platforms_matrix,
              platforms_matrix_commented_includes,
              semrel_formula,
              width=4,
              use_new_travis_format=False,
              use_gitlab_format=False,
              use_github_format=False,
              use_vagrant_platforms=False,
              use_proxy_platforms_windows=[]
          ) %}
{%-   filter indent(width) %}
{#-     Centralise duplication from here and `kitchen.yml` #}
{%-     set platform_and_suite_names_done = [] %}
{%-     set commented_platform_done = [] %}
{%-     set all_platforms = saltimages + vagrantboxes + proxyplatformswindows %}
{%-     set driver_platforms = saltimages %}
{%-     if use_vagrant_platforms %}
{%-       set driver_platforms = vagrantboxes %}
{%-     elif use_proxy_platforms_windows %}
{%-       set driver_platforms = proxyplatformswindows %}
{%-     endif %}
{%-     for platform in driver_platforms %}
{%-       set os       = platform[0] %}
{%-       set os_ver   = platform[1] %}
{%-       set salt_ver = platform[2] %}
{%-       set py_ver   = platform[3] %}
{#-       Go to the next platform where not set as active #}
{%-       if (os == 'freebsd' and not testing_freebsd.active) or
             (os == 'openbsd' and not testing_openbsd.active) or
             (os == 'windows' and not testing_windows.active) %}
{%-         continue %}
{%-       endif %}

{#-       Check if the platform matches any of the `platforms` listed #}
{%-       set ns_check_platform = namespace(match=False) %}
{%-       for check in platforms %}
{%-         set ch_os       = check[0] if check[0] else platform[0] %}
{%-         set ch_os_ver   = check[1] if check[1] else platform[1] %}
{%-         set ch_salt_ver = check[2] if check[2] else platform[2] %}
{%-         set ch_py_ver   = check[3] if check[3] else platform[3] %}
{%-         if platform == [ch_os, ch_os_ver, ch_salt_ver, ch_py_ver] %}
{%-           set ns_check_platform.match = True %}
{%-           break %}
{%-         endif %}
{%-       endfor %}
{#-       If a match hasn't been found, go to the next entry under `driver_platforms` #}
{#-       Likewise, if working with Windows proxy platforms and doesn't match the platform sent through #}
{%-       if (not ns_check_platform.match) or
             (use_proxy_platforms_windows and use_proxy_platforms_windows != platform)
%}
{%-         continue %}
{%-       endif %}

{#-       Work through each inspec suite defined for the formula, ordered by the suite number #}
{%-       for index in range(0, inspec_suites_kitchen | length) %}
{%-         set suite = inspec_suites_kitchen[index] %}
{#-         Only continue if the `suite.name` is present in the given matrix #}
{%-         if suite.name in inspec_suites_matrix %}
{%-           set suite_name = suite.name %}

{#-           TODO: Use `for` loop (0..1) to merge these two blocks into one #}
{#-                 As in, don't need separate `includes` and `excludes` blocks #}
{#-           set includes = suite.includes #}
{%-           set includes = [] %}
{%-           if suite.includes %}
{%-             if suite.includes == [[]] %}
{%-               set includes = suite.includes %}
{%-             else %}
{#-               Centralise duplication from here and `libcimatrix.jinja` #}
{%-               for clude_platform in all_platforms %}
{#-                 Check if the clude_platform matches any of the `platforms` listed #}
{%-                 for check in suite.includes %}
{%-                   set ch_os       = check[0] if check[0] else clude_platform[0] %}
{%-                   set ch_os_ver   = check[1] if check[1] else clude_platform[1] %}
{%-                   set ch_salt_ver = check[2] if check[2] else clude_platform[2] %}
{%-                   set ch_py_ver   = check[3] if check[3] else clude_platform[3] %}
{%-                   if clude_platform == [ch_os, ch_os_ver, ch_salt_ver, ch_py_ver] %}
{%-                     do includes.append(clude_platform) %}
{%-                     break %}
{%-                   endif %}
{%-                 endfor %}
{%-               endfor %}
{%-             endif %}
{%-           endif %}

{#-           set excludes = suite.excludes #}
{%-           set excludes = [] %}
{%-           if suite.excludes %}
{%-             if suite.excludes == [[]] %}
{%-               set excludes = suite.excludes %}
{%-             else %}
{#-               Centralise duplication from here and `libcimatrix.jinja` #}
{%-               for clude_platform in all_platforms %}
{#-                 Check if the clude_platform matches any of the `platforms` listed #}
{%-                 for check in suite.excludes %}
{%-                   set ch_os       = check[0] if check[0] else clude_platform[0] %}
{%-                   set ch_os_ver   = check[1] if check[1] else clude_platform[1] %}
{%-                   set ch_salt_ver = check[2] if check[2] else clude_platform[2] %}
{%-                   set ch_py_ver   = check[3] if check[3] else clude_platform[3] %}
{%-                   if clude_platform == [ch_os, ch_os_ver, ch_salt_ver, ch_py_ver] %}
{%-                     do excludes.append(clude_platform) %}
{%-                     break %}
{%-                   endif %}
{%-                 endfor %}
{%-               endfor %}
{%-             endif %}
{%-           endif %}

{%-           set platform_and_suite_name = platform + [suite_name] %}
{#-           Prevent using a `platform_and_suite_name` more than once #}
{#-           I.e. In case suite_name resolves to `''` multiple times #}
{%-           if platform_and_suite_name not in platform_and_suite_names_done %}
{%-             do platform_and_suite_names_done.append(platform_and_suite_name) %}
{#-             Only continue depending on an appropriate combination of `includes` and `excludes`: #}
{#-             |---|-----|-----|--------|                                                          #}
{#-             | # | inc | exc | result |                                                          #}
{#-             |---|-----|-----|--------|                                                          #}
{#-             | 1 |  y  | []  |  TRUE  |                                                          #}
{#-             | 2 |  y  |  n  |  TRUE  |                                                          #}
{#-             | 3 |  y  |  y  |  TRUE  |                                                          #}
{#-             | 4 | []  | []  |  TRUE  |                                                          #}
{#-             | 5 | []  |  n  |  TRUE  |                                                          #}
{#-             | 6 | []  |  y  | FALSE  |                                                          #}
{#-             | 7 |  n  | []  | FALSE  |                                                          #}
{#-             | 8 |  n  |  n  | FALSE  |                                                          #}
{#-             | 9 |  n  |  y  | FALSE  |                                                          #}
{#-             |---|-----|-----|--------|                                                          #}
{%-             if (platform in includes) or (not includes and platform not in excludes) %}
{%-               set include_instance = True %}
{#-               Compare combined [platform] and [suite_name] to see if enabled in the matrix #}

{%-               set platforms_matrix_expanded = [] %}
{%-               if platforms_matrix and platforms_matrix != [[]] %}
{#-                 Centralise duplication from here and `libcimatrix.jinja` #}
{%-                 for matrix_platform in driver_platforms %}
{#-                   Check if the matrix_platform matches any of the `platforms` listed #}
{%-                   for check in platforms_matrix %}
{%-                     set ch_os       = check[0] if check[0] else matrix_platform[0] %}
{%-                     set ch_os_ver   = check[1] if check[1] else matrix_platform[1] %}
{%-                     set ch_salt_ver = check[2] if check[2] else matrix_platform[2] %}
{%-                     set ch_py_ver   = check[3] if check[3] else matrix_platform[3] %}
{%-                     set ch_suite    = check[4] %}
{%-                     if matrix_platform == [ch_os, ch_os_ver, ch_salt_ver, ch_py_ver] %}
{%-                       do platforms_matrix_expanded.append(matrix_platform + [ch_suite]) %}
{#-                       We want to break in all conditions except the following: #}
{#-                       1. The `java-formula` should only have extra lines for `ubuntu` #}
{#-                       2. The `arvados-formula` should only have extra lines for: #}
{#-                          - `debian-10` #}
{#-                          - `ubuntu-18.04` #}
{#-                          - `centos-7` #}
{%-                       if not (semrel_formula in ['java'] and ch_os in ['ubuntu']) and
                             not (semrel_formula in ['arvados'] and [ch_os, ch_os_ver] in [['debian', 10], ['ubuntu', 18.04], ['centos', 7]]) %}
{%-                         break %}
{%-                       endif %}
{%-                     endif %}
{%-                   endfor %}
{%-                 endfor %}
{%-               endif %}

{%-               if platform_and_suite_name in platforms_matrix_expanded %}
{%-                 set comment = '' %}
{%-               else %}
{%-                 set comment = '# ' %}
{#-                 Only include commented instances from the main platforms #}
{#-                 Otherwise only use the first suite for the other platforms #}
{%-                 if not salt_ver == 'master' %}
{%-                   if platform not in commented_platform_done %}
{%-                     do commented_platform_done.append(platform) %}
{%-                   else %}
{%-                     set include_instance = False %}
{%-                   endif %}
{%-                 endif %}
{%-               endif %}
{#-               Define `instance_and_env`, modified for new Travis format or GitLab format #}
{%-               set instance_and_env = 'INSTANCE: ' %}
{%-               if use_new_travis_format %}
{%-                 set instance_and_env = 'env: INSTANCE=' %}
{%-               elif use_gitlab_format or use_github_format %}
{%-                 set instance_and_env = '' %}
{%-               endif %}
{#-               Define GitLab-specific formats #}
{%-               if use_gitlab_format %}
{%-                 set list_format = '' %}
{%-                 set test_template = ": {extends: '.test_instance'}" %}
{%-               else %}
{%-                 set list_format = '- ' %}
{%-                 set test_template = "" %}
{%-               endif %}
{%-               if include_instance %}
{#-                 Only add a prefix if suite_name is given #}
{%-                 set prefix = '' %}
{%-                 if suite_name %}
{%-                   set prefix = suite_name|replace('_', '-') ~ '-' %}
{%-                 endif %}
{#-                 Concatenate the `INSTANCE` #}
{%-                 set instance = '{0}{1}-{2}-{3}-py{4}'.format(
                      prefix,
                      os | replace('/', '-'),
                      os_ver | replace('.', ''),
                      salt_ver | replace('.', '-'),
                      py_ver,
                    ) %}
{%-                 if semrel_formula == 'apache' and
                       [suite_name, os, os_ver, salt_ver] == ['default', 'amazonlinux', 2, 'master']
%}
# https://community.letsencrypt.org/t/localhost-crt-does-not-exist-or-is-empty/103979
{%-                 endif %}
{{ comment }}{{ list_format }}{{ instance_and_env }}{{ instance }}{{ test_template }}
{#-               [End] if include_instance #}
{%-               endif %}
{#-             [End] if (platform in includes) or (not includes and platform not in excludes) #}
{%-             endif %}
{#-           [End] if platform_and_suite_name not in platform_and_suite_names_done #}
{%-           endif %}
{#-         [End] if suite.name in inspec_suites_matrix #}
{%-         endif %}
{#-       [End] for index in range(0, inspec_suites_kitchen | length) #}
{%-       endfor %}
{#-     [End] for platform in platforms #}
{%-     endfor %}
{%-   endfilter %}
{%- endmacro %}
